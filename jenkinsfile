pipeline {
    agent any

    environment {
        IMAGE_NAME = "spotify-clone"
        CONTAINER_NAME = "spotify-container"
        SCANNER_HOME = tool 'SonarQubeScanner'
        REACT_APP_SPOTIFY_CLIENT_ID = "cb5fd1d086f8480ca1e09689d8383811"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/Gabe-ios/Spotify-Pipeline.git'
            }
        }

        stage('Start Ngrok & Get Public URL') {
            steps {
                script {
                    sh 'nohup ngrok http 80 --log=stdout > ngrok.log 2>&1 &'
                    sleep 5
                    def ngrokApiResponse = sh(script: 'curl --silent http://localhost:4040/api/tunnels', returnStdout: true).trim()
                    def json = readJSON text: ngrokApiResponse
                    env.NGROK_URL = json.tunnels[0].public_url
                    echo "Ngrok URL: ${env.NGROK_URL}"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'SonarQubeToken', variable: 'SONAR_TOKEN')]) {
                    withSonarQubeEnv('SonarQubeServer') {
                        sh '''
                            $SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectKey=SpotifyClone \
                            -Dsonar.projectName=SpotifyClone \
                            -Dsonar.sources=src \
                            -Dsonar.login=$SONAR_TOKEN
                        '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    def qualityGate = waitForQualityGate abortPipeline: false, credentialsId: 'SonarQubeToken'
                    if (qualityGate.status != 'OK') {
                        error "Pipeline failed due to quality gate status: ${qualityGate.status}"
                    }
                }
            }
        }

        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'Dependency-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }

        stage('Build Docker Image') {
            steps {
                sh """
                    docker build \
                    --build-arg REACT_APP_SPOTIFY_CLIENT_ID=${REACT_APP_SPOTIFY_CLIENT_ID} \
                    --build-arg REACT_APP_SPOTIFY_REDIRECT_URL=${env.NGROK_URL}/callback \
                    -t $IMAGE_NAME .
                """
            }
        }

        stage('TRIVY Image Scan') {
            steps {
                sh "trivy image $IMAGE_NAME > trivyimage.txt"
            }
        }

        stage('Stop & Remove Old Container') {
            steps {
                sh "docker rm -f $CONTAINER_NAME || true"
            }
        }

        stage('Run Docker Container') {
            steps {
                sh "docker run -d --name $CONTAINER_NAME -p 80:80 $IMAGE_NAME"
            }
        }
    }

    post {
        always {
            emailext attachLog: true,
                subject: "'${currentBuild.result}'",
                body: "Project: ${env.JOB_NAME}<br/>" +
                      "Build Number: ${env.BUILD_NUMBER}<br/>" +
                      "URL: ${env.BUILD_URL}<br/>",
                to: 'gabriel.walkerzuniga@gmail.com',
                attachmentsPattern: 'trivyfs.txt,trivyimage.txt'
        }
    }
}
